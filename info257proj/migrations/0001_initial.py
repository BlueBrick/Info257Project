# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-05-05 02:20
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisData',
            fields=[
                ('node', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('lz_hb', models.CharField(blank=True, max_length=100, null=True)),
                ('trend_3yr', models.FloatField(blank=True, null=True)),
                ('trend_2yr', models.FloatField(blank=True, null=True)),
                ('trend_1yr', models.FloatField(blank=True, null=True)),
                ('typical_production', models.FloatField(blank=True, null=True)),
                ('typical_yield', models.FloatField(blank=True, null=True)),
                ('av_delta', models.FloatField(blank=True, null=True)),
                ('av_revenue', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Analysis_Data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HourlyLmp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deliverydate', models.CharField(blank=True, max_length=100, null=True)),
                ('hourending', models.CharField(blank=True, max_length=100, null=True)),
                ('busname', models.CharField(blank=True, max_length=100, null=True)),
                ('lmp', models.FloatField(blank=True, null=True)),
                ('dstflag', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'db_table': 'Hourly_LMP',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NodeLocations',
            fields=[
                ('node', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('utility', models.CharField(blank=True, max_length=100, null=True)),
                ('voltage_min', models.IntegerField(blank=True, null=True)),
                ('voltage_max', models.IntegerField(blank=True, null=True)),
                ('settlement_lz', models.CharField(blank=True, db_column='settlement_LZ', max_length=100, null=True)),
                ('loc_proxy', models.IntegerField(blank=True, null=True)),
                ('lz_proxy', models.IntegerField(blank=True, db_column='LZ_proxy', null=True)),
                ('util_proxy', models.IntegerField(blank=True, null=True)),
                ('optional', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Node_Locations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpointData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node', models.CharField(blank=True, max_length=100, null=True)),
                ('revenue', models.FloatField(blank=True, null=True)),
                ('production', models.FloatField(blank=True, null=True)),
                ('yield_field', models.FloatField(blank=True, db_column='yield', null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'SPoint_Data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpointLmp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.CharField(blank=True, max_length=100, null=True)),
                ('hourending', models.CharField(blank=True, max_length=50, null=True)),
                ('repeated_hr', models.CharField(blank=True, max_length=1, null=True)),
                ('spoint', models.CharField(blank=True, db_column='SPoint', max_length=100, null=True)),
                ('spoint_lmp', models.FloatField(blank=True, db_column='SPoint_lmp', null=True)),
            ],
            options={
                'db_table': 'SPoint_LMP',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpointLocations',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'SPoint_Locations',
                'managed': False,
            },
        ),
    ]
